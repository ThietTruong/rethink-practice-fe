# This is the name of your workflow, which will appear in the GitHub Actions tab of your repository.
name: CI/CD Pipeline

# This section defines when your workflow will run.
on:
  # The 'pull_request' event means this workflow will run whenever a pull request is opened,
  # synchronized (new commits pushed to the PR branch), reopened, or ready for review.
  pull_request:
    # 'branches' specifies that this workflow should only trigger if the pull request
    # is targeting the 'main' branch.
    branches:
      - main

  # The 'push' event means this workflow will run whenever code is pushed directly
  # or merged into the specified branches.
  push:
    # 'branches' specifies that this workflow should only trigger when changes are
    # pushed or merged into the 'main' branch.
    branches:
      - main

# 'jobs' define a set of steps that execute on a runner (a virtual machine).
# A workflow can have one or more jobs, and they run in parallel by default,
# unless you specify dependencies between them.
jobs:
  # This is the first job, named 'build_and_lint'. It runs when a pull request is created or updated.
  build_and_lint:
    # 'runs-on' specifies the type of virtual machine environment where the job will execute.
    # 'ubuntu-latest' means it will run on the latest version of Ubuntu Linux.
    runs-on: ubuntu-latest

    # 'if' condition ensures this job only runs if the event is a 'pull_request'.
    # This prevents it from running twice if a 'push' also triggers the workflow.
    if: github.event_name == 'pull_request'

    # 'steps' are a sequence of tasks that will be executed as part of this job.
    steps:
      # Step 1: Check out your repository's code.
      # 'uses' tells GitHub Actions to use a pre-built action from the GitHub Marketplace.
      # 'actions/checkout@v4' is a standard action that checks out your repository's code
      # onto the runner, making it available for subsequent steps.
      - name: Checkout Code
        uses: actions/checkout@v4

      # Step 2: Set up Node.js environment.
      # 'actions/setup-node@v4' sets up a Node.js environment on the runner.
      # 'node-version: '18.x'' specifies that Node.js version 18 (or the latest patch within 18)
      # should be used. This is crucial for consistent builds.
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18.x'

      # Step 3: Install Node.js dependencies.
      # 'run' executes a command-line script.
      # 'npm ci' (clean install) is preferred over 'npm install' in CI/CD environments.
      # It ensures that dependencies are installed exactly as specified in 'package-lock.json',
      # providing more reliable and reproducible builds.
      - name: Install Dependencies
        run: npm ci

      # Step 4: Run your build command.
      # This step executes the 'build' script defined in your 'package.json' file.
      # This typically compiles your code, bundles assets, etc.
      - name: Run Build
        run: npm run build

      # Step 5: Run ESLint to check for code style and potential errors.
      # This step executes the 'lint' script defined in your 'package.json'.
      # If ESLint finds issues and your configuration makes it exit with a non-zero code,
      # this step (and thus the job) will fail.
      # - name: Run ESLint
      #   run: npm run lint

      # Step 6: Run your tests.
      # This step executes the 'test' script defined in your 'package.json'.
      # Unit tests, integration tests, etc., ensure your code works as expected.
      # If any tests fail, this step will fail.
      # - name: Run Tests
      #   run: npm test

  # This is the second job, named 'deploy'. It runs after a merge to the main branch.
  deploy:
    # 'runs-on' specifies the type of virtual machine environment.
    runs-on: ubuntu-latest

    # 'needs' indicates that this job depends on the 'build_and_lint' job.
    # This means 'deploy' will only start after 'build_and_lint' has completed successfully.
    # This is important for ensuring you only deploy code that has passed all checks.
    needs: build_and_lint

    # 'if' condition ensures this job only runs if the event is a 'push' and the 'main' branch.
    # And specifically, it only runs if the previous job ('build_and_lint') succeeded.
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' && needs.build_and_lint.result == 'success'

    steps:
      # Step 1: Check out your repository's code.
      - name: Checkout Code
        uses: actions/checkout@v4

      # Step 2: Build the Docker image.
      # 'docker build -t your-image-name .' builds a Docker image.
      # '-t your-image-name' tags the image with a name (e.g., 'my-app:latest').
      # '.' indicates that the Dockerfile is in the current directory (root of your repo).
      - name: Build Docker Image
        run: docker build -t thiettruong/rethink-practice-fe:latest .

      # Step 3: Log in to Docker Hub (or your container registry).
      # This step requires your Docker Hub username and a Personal Access Token (PAT)
      # stored as GitHub Secrets. NEVER hardcode credentials.
      # 'secrets.DOCKER_USERNAME' and 'secrets.DOCKER_PASSWORD' refer to secrets
      # you would configure in your GitHub repository settings.
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Step 4: Push the Docker image to your container registry.
      # This uploads your newly built Docker image to Docker Hub (or whatever registry you logged into).
      - name: Push Docker Image
        run: docker thiettruong/rethink-practice-fe:latest

      # Step 5: Deploy Application to EC2 via SSH
      # This step connects to your EC2 instance using SSH and executes deployment commands.
      # You'll need to configure your SSH private key as a GitHub Secret named `SSH_PRIVATE_KEY`.
      # Make sure the SSH key has the correct permissions (e.g., `chmod 400 your_key.pem`).
      - name: Deploy to EC2
        uses: appleboy/ssh-action@v1.0.0 # A popular action for SSHing into remote servers
        with:
          host: ${{ secrets.EC2_HOST }}             # Your EC2 instance's public IP or hostname
          username: ${{ secrets.EC2_USERNAME }}     # The SSH username for your EC2 (e.g., 'ubuntu', 'ec2-user')
          key: ${{ secrets.SSH_PRIVATE_KEY }}       # Your SSH private key (stored as a GitHub Secret)
          script: |
            echo "--- Starting EC2 Deployment ---"
            # Replace 'your-docker-hub-username/your-app-name:latest' with your actual image name
            # Replace 'your-app-container' with a desired name for your running Docker container
            # Replace '80' and '3000' with your actual host and container ports for Next.js
            
            # Stop and remove any existing container for your app
            if docker ps -a --format '{{.Names}}' | grep -q "your-app-container"; then
              echo "Stopping existing container: your-app-container"
              docker stop your-app-container
              docker rm your-app-container
            else
              echo "No existing container named your-app-container to stop/remove."
            fi

            # Pull the latest Docker image
            echo "Pulling latest Docker image: your-docker-hub-username/your-app-name:latest"
            docker pull your-docker-hub-username/your-app-name:latest

            # Run the new Docker container
            # Make sure to map the correct port (e.g., Next.js often runs on 3000 inside the container)
            echo "Running new Docker container..."
            docker run -d --name your-app-container -p 3000:3000 thiettruong/rethink-practice-fe:latest

            echo "Deployment to EC2 finished successfully."
